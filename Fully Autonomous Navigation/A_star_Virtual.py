# https://medium.com/@nicholas.w.swift/easy-a-star-pathfinding-7e6689c7f7b2
import math


import numpy as np
import matplotlib.pyplot as plt

from scipy import interpolate


class Node():
    """A node class for A* Pathfinding"""

    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position

        self.g = 0
        self.h = 0
        self.f = 0

    def __eq__(self, other):
        return self.position == other.position


def astar(maze, start, end):
    """Returns a list of tuples as a path from the given start to the given end in the given maze"""

    # Create start and end node
    start_node = Node(None, start)
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, end)
    end_node.g = end_node.h = end_node.f = 0

    # Initialize both open and closed list
    open_list = []
    closed_list = []

    # Add the start node
    open_list.append(start_node)

    # Loop until you find the end
    while len(open_list) > 0:

        # Get the current node
        current_node = open_list[0]
        current_index = 0
        for index, item in enumerate(open_list):
            if item.f < current_node.f:
                current_node = item
                current_index = index

        # Pop current off open list, add to closed list
        open_list.pop(current_index)
        closed_list.append(current_node)

        # Found the goal
        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
            return path[::-1]  # Return reversed path

        # Generate children
        children = []
        for new_position in [(0, -1, 0), (0, 1, 0), (-1, 0, 0),
                             (1, 0, 0), (-1, -1, 0), (-1, 1, 0),
                             (1, -1, 0), (1, 1, 0),
                             (0, -1, -1), (0, 1, -1), (-1, 0, -1),
                             (1, 0, -1), (-1, -1, -1), (-1, 1, -1),
                             (1, -1, -1), (1, 1, -1),
                             (0, -1, 1), (0, 1, 1), (-1, 0, 1),
                             (1, 0, 1), (-1, -1, 1), (-1, 1, 1),
                             (1, -1, 1), (1, 1, 1),
                             ]:  # Adjacent squares

            # Get node position
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1],
                             current_node.position[2] + new_position[2])

            # Make sure within range
            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (
                    len(maze[len(maze) - 1]) - 1) or node_position[1] < 0 or node_position[2] < 0 or node_position[
                2] > 4:
                continue

            # Make sure walkable terrain
            if maze[node_position[0]][node_position[1]][node_position[2]] != 0:
                continue

            # Create new node
            new_node = Node(current_node, node_position)

            # Append
            children.append(new_node)

        # Loop through children
        for child in children:

            # Child is on the closed list
            for closed_child in closed_list:
                if child == closed_child:
                    continue

            # Create the f, g, and h values
            child.g = current_node.g + 1
            child.h = math.sqrt(((child.position[0] - end_node.position[0]) ** 2) + (
                    (child.position[1] - end_node.position[1]) ** 2) + (
                                        (child.position[2] - end_node.position[2]) ** 2))
            child.f = child.g + child.h

            # Child is already in the open list
            for open_node in open_list:
                if child == open_node and child.g > open_node.g:
                    continue

            # Add the child to the open list
            open_list.append(child)


def main():
    maze = [[[0, 0, 1, 0, 0],
             [0, 0, 1, 0, 0],
             [0, 0, 0, 0, 0],
             [0, 0, 1, 0, 0],
             [0, 0, 1, 0, 0]]
            ]

    a1 = np.array([[0, 0, 1, 0, 0],
                   [0, 0, 1, 0, 0],
                   [0, 0, 0, 0, 0],
                   [0, 1, 1, 1, 0],
                   [0, 1, 0, 0, 0]])

    a2 = np.array([[0, 0, 1, 1, 0],
                   [0, 0, 1, 1, 0],
                   [0, 0, 0, 0, 0],
                   [0, 1, 1, 0, 0],
                   [0, 1, 1, 0, 0]])

    a3 = np.array([[0, 0, 1, 1, 0],
                   [0, 0, 1, 1, 0],
                   [0, 0, 0, 0, 0],
                   [0, 1, 1, 0, 0],
                   [0, 1, 1, 0, 0]])

    a4 = np.array([[0, 0, 1, 1, 0],
                   [0, 0, 1, 1, 0],
                   [0, 0, 0, 0, 0],
                   [0, 1, 1, 0, 0],
                   [0, 1, 1, 0, 0]])

    a5 = np.array([[0, 0, 1, 1, 0],
                   [0, 0, 1, 1, 0],
                   [0, 0, 0, 0, 0],
                   [0, 1, 1, 0, 0],
                   [0, 1, 1, 0, 0]])

    p1 = np.asarray([[3, 3, 3, 3, 3],
                     [1, 1, 1, 1, 1],
                     [0, 1, 2, 3, 4]])

    p2 = np.asarray([[4, 4, 4, 4, 4],
                     [1, 1, 1, 1, 1],
                     [0, 1, 2, 3, 4]])
    a2 = a1;
    a3 = a1;
    a4 = a1;
    a5 = a1

    p3 = np.asarray([[0.5, 0.5],
                     [2.5, 2.5],
                     [0, 4]])

    p4 = np.asarray([[2, 2],
                     [3, 4],
                     [3, 4]])

    maze = a1.reshape((5, 5, 1))
    maze = np.append(maze, a2.reshape((5, 5, 1)), axis=2)
    maze = np.append(maze, a3.reshape((5, 5, 1)), axis=2)
    maze = np.append(maze, a4.reshape((5, 5, 1)), axis=2)
    maze = np.append(maze, a5.reshape((5, 5, 1)), axis=2)

    a = maze

    start = (4, 0, 0)
    end = (4, 4, 0)

    path = astar(a, start, end)
    print(path)

    path = np.asarray(path)
    xdata = path[:, 0]
    ydata = path[:, 1]
    zdata = path[:, 2]

    fig = plt.figure()
    # ax = plt.axes(projection='3d')
    from mpl_toolkits.mplot3d import Axes3D
    ax = Axes3D(fig, azim=30, elev=30)


    def data_for_cylinder_along_z(center_x, center_y, radius, height_z):
        z = np.linspace(0, height_z, 50)
        theta = np.linspace(0, 2 * np.pi, 50)
        theta_grid, z_grid = np.meshgrid(theta, z)
        x_grid = radius * np.cos(theta_grid) + center_x
        y_grid = radius * np.sin(theta_grid) + center_y
        return x_grid, y_grid, z_grid

    from mpl_toolkits.mplot3d import Axes3D
    # fig = plt.figure()
    # ax = fig.add_subplot(111, projection='3d')

    x = (-(5 / 2 - 0.5) / (5 / 2)) / 2
    y = (-(5 / 2 - 2.5) / (5 / 2)) / 2

    Xc, Yc, Zc = data_for_cylinder_along_z(x, y, 0.2, 0.5)
    ax.plot_surface(Xc, Yc, Zc, alpha=0.2, edgecolor='black')
    x = (-(5 / 2 - 3.5) / (5 / 2)) / 2
    y = (-(5 / 2 - 1.5) / (5 / 2)) / 2

    Xc, Yc, Zc = data_for_cylinder_along_z(x, y, 0.2, 0.5)
    ax.plot_surface(Xc, Yc, Zc, alpha=0.2, edgecolor='black')


    ## interp
    num_true_pts = 10

    x_sample = np.array([4, 3, 2, 2, 2, 1, 0])
    y_sample = np.array([0, 0, 1, 2, 3, 4, 4])
    z_sample = np.array([4, 3, 2, 1, 0, 0, 0])

    tck, u = interpolate.splprep([x_sample, y_sample, z_sample], s=2)
    x_knots, y_knots, z_knots = interpolate.splev(tck[0], tck)
    u_fine = np.linspace(0, 1, num_true_pts)
    x_fine, y_fine, z_fine = np.round(interpolate.splev(u_fine, tck), 2)
    x_fine = (-(5 / 2 - x_fine) / (5 / 2)) / 2
    y_fine = (-(5 / 2 - y_fine) / (5 / 2)) / 2
    z_fine = (-(5 / 2 - z_fine) / (5 / 2)) / 4
    ## Plot fine trajectory
    ax.plot3D(x_fine, y_fine, z_fine+0.3, 'green', linewidth=3, linestyle='--', label='Planned path')

    achieved_traj = np.array([[0.31, -0.47999999, 0.035],
           [0.31, -0.47999999, 0.035],
           [0.31, -0.47999999, 0.035],
           [0.31, -0.49000001, 0.035],
           [0.31, -0.49000001, 0.035],
           [0.31999999, -0.49000001, 0.035],
           [0.31999999, -0.49000001, 0.04],
           [0.31999999, -0.5, 0.04],
           [0.33000001, -0.50999999, 0.045],
           [0.33000001, -0.50999999, 0.07],
           [0.34, -0.51999998, 0.075],
           [0.34999999, -0.52999997, 0.08],
           [0.34999999, -0.52999997, 0.085],
           [0.34999999, -0.54000002, 0.1],
           [0.34999999, -0.54000002, 0.105],
           [0.36000001, -0.55000001, 0.115],
           [0.36000001, -0.55000001, 0.125],
           [0.37, -0.56, 0.13500001],
           [0.37, -0.56999999, 0.145],
           [0.37, -0.56999999, 0.155],
           [0.37, -0.58999997, 0.16500001],
           [0.37, -0.60000002, 0.19],
           [0.37, -0.61000001, 0.2],
           [0.38, -0.62, 0.20999999],
           [0.38, -0.62, 0.22],
           [0.38, -0.63, 0.22499999],
           [0.38, -0.63999999, 0.235],
           [0.38, -0.64999998, 0.25],
           [0.38999999, -0.66000003, 0.25999999],
           [0.38999999, -0.67000002, 0.28],
           [0.38999999, -0.68000001, 0.28999999],
           [0.38999999, -0.68000001, 0.30000001],
           [0.38999999, -0.69, 0.31],
           [0.40000001, -0.69, 0.32499999],
           [0.40000001, -0.69, 0.33000001],
           [0.41, -0.69999999, 0.34],
           [0.41, -0.69999999, 0.34999999],
           [0.41999999, -0.69999999, 0.36500001],
           [0.41999999, -0.69999999, 0.375],
           [0.41999999, -0.70999998, 0.38499999],
           [0.43000001, -0.70999998, 0.38999999],
           [0.43000001, -0.70999998, 0.40000001],
           [0.43000001, -0.69999999, 0.405],
           [0.43000001, -0.69999999, 0.41],
           [0.43000001, -0.69, 0.41499999],
           [0.44, -0.69, 0.42500001],
           [0.44, -0.69, 0.43000001],
           [0.44, -0.69, 0.43000001],
           [0.44, -0.69, 0.435],
           [0.44999999, -0.69, 0.435],
           [0.44999999, -0.69, 0.435],
           [0.44999999, -0.68000001, 0.435],
           [0.44999999, -0.68000001, 0.44],
           [0.44999999, -0.68000001, 0.44],
           [0.44999999, -0.68000001, 0.44],
           [0.44999999, -0.68000001, 0.435],
           [0.44999999, -0.67000002, 0.435],
           [0.44999999, -0.67000002, 0.435],
           [0.44999999, -0.67000002, 0.435],
           [0.44, -0.66000003, 0.435],
           [0.44, -0.66000003, 0.435],
           [0.44, -0.66000003, 0.435],
           [0.44999999, -0.64999998, 0.435],
           [0.44999999, -0.64999998, 0.435],
           [0.44999999, -0.64999998, 0.435],
           [0.44999999, -0.64999998, 0.435],
           [0.44999999, -0.63999999, 0.435],
           [0.44999999, -0.63, 0.435],
           [0.44999999, -0.63, 0.435],
           [0.44999999, -0.62, 0.43000001],
           [0.44, -0.62, 0.435],
           [0.44, -0.62, 0.435],
           [0.44, -0.62, 0.435],
           [0.43000001, -0.61000001, 0.435],
           [0.43000001, -0.60000002, 0.435],
           [0.43000001, -0.60000002, 0.435],
           [0.43000001, -0.60000002, 0.435],
           [0.43000001, -0.58999997, 0.43000001],
           [0.43000001, -0.58999997, 0.43000001],
           [0.41999999, -0.58999997, 0.43000001],
           [0.41999999, -0.57999998, 0.43000001],
           [0.41, -0.57999998, 0.43000001],
           [0.41, -0.56999999, 0.435],
           [0.41, -0.56999999, 0.435],
           [0.41, -0.56, 0.435],
           [0.41, -0.56, 0.435],
           [0.41, -0.56, 0.435],
           [0.40000001, -0.56, 0.44],
           [0.40000001, -0.56, 0.435],
           [0.40000001, -0.55000001, 0.435],
           [0.40000001, -0.55000001, 0.435],
           [0.40000001, -0.55000001, 0.435],
           [0.40000001, -0.55000001, 0.435],
           [0.38999999, -0.55000001, 0.435],
           [0.38999999, -0.55000001, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38, -0.54000002, 0.435],
           [0.38, -0.54000002, 0.44],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.435],
           [0.38999999, -0.54000002, 0.44],
           [0.38999999, -0.54000002, 0.44],
           [0.38999999, -0.55000001, 0.44],
           [0.38999999, -0.55000001, 0.44],
           [0.38, -0.54000002, 0.44],
           [0.37, -0.54000002, 0.435],
           [0.34999999, -0.52999997, 0.435],
           [0.34, -0.52999997, 0.43000001],
           [0.33000001, -0.52999997, 0.43000001],
           [0.31999999, -0.52999997, 0.43000001],
           [0.30000001, -0.52999997, 0.42500001],
           [0.30000001, -0.51999998, 0.42500001],
           [0.28999999, -0.51999998, 0.42500001],
           [0.27000001, -0.51999998, 0.42500001],
           [0.25999999, -0.50999999, 0.42500001],
           [0.23999999, -0.50999999, 0.41499999],
           [0.23, -0.5, 0.41],
           [0.22, -0.49000001, 0.405],
           [0.2, -0.49000001, 0.40000001],
           [0.2, -0.47999999, 0.40000001],
           [0.18000001, -0.47999999, 0.39500001],
           [0.17, -0.47, 0.39500001],
           [0.15000001, -0.47, 0.38999999],
           [0.15000001, -0.46000001, 0.38],
           [0.14, -0.46000001, 0.375],
           [0.13, -0.46000001, 0.37],
           [0.12, -0.44999999, 0.36500001],
           [0.11, -0.44, 0.36000001],
           [0.1, -0.43000001, 0.35499999],
           [0.08, -0.41999999, 0.34999999],
           [0.07, -0.41, 0.34999999],
           [0.06, -0.41, 0.34],
           [0.05, -0.41, 0.33500001],
           [0.04, -0.40000001, 0.33000001],
           [0.04, -0.40000001, 0.32499999],
           [0.03, -0.38999999, 0.31999999],
           [0.03, -0.38999999, 0.31999999],
           [0.01, -0.37, 0.31],
           [0.01, -0.34999999, 0.30500001],
           [0., -0.34, 0.29499999],
           [-0.01, -0.33000001, 0.29499999],
           [-0.01, -0.31999999, 0.28999999],
           [-0.02, -0.30000001, 0.285],
           [-0.03, -0.28999999, 0.28],
           [-0.04, -0.28, 0.27500001],
           [-0.05, -0.27000001, 0.27000001],
           [-0.06, -0.25999999, 0.26499999],
           [-0.06, -0.25, 0.255],
           [-0.07, -0.23999999, 0.25],
           [-0.07, -0.22, 0.23999999],
           [-0.07, -0.20999999, 0.235],
           [-0.07, -0.19, 0.22499999],
           [-0.07, -0.18000001, 0.22],
           [-0.07, -0.15000001, 0.215],
           [-0.07, -0.14, 0.205],
           [-0.06, -0.13, 0.19499999],
           [-0.06, -0.12, 0.19],
           [-0.06, -0.11, 0.185],
           [-0.07, -0.1, 0.18000001],
           [-0.07, -0.06, 0.16500001],
           [-0.08, -0.04, 0.155],
           [-0.08, -0.03, 0.15000001],
           [-0.08, -0.01, 0.14],
           [-0.09, 0., 0.13500001],
           [-0.1, 0.04, 0.125],
           [-0.11, 0.05, 0.12],
           [-0.12, 0.07, 0.115],
           [-0.12, 0.07, 0.11],
           [-0.13, 0.08, 0.105],
           [-0.14, 0.1, 0.105],
           [-0.15000001, 0.12, 0.095],
           [-0.17, 0.13, 0.09],
           [-0.18000001, 0.14, 0.085],
           [-0.2, 0.16, 0.085],
           [-0.2, 0.17, 0.085],
           [-0.20999999, 0.17, 0.085],
           [-0.20999999, 0.19, 0.085],
           [-0.20999999, 0.19, 0.085],
           [-0.2, 0.19, 0.08],
           [-0.19, 0.19, 0.075],
           [-0.2, 0.19, 0.075],
           [-0.20999999, 0.2, 0.07],
           [-0.23, 0.20999999, 0.065],
           [-0.23999999, 0.23, 0.065],
           [-0.28, 0.25, 0.06],
           [-0.30000001, 0.25999999, 0.06],
           [-0.31999999, 0.27000001, 0.055],
           [-0.33000001, 0.27000001, 0.055],
           [-0.34, 0.28, 0.055],
           [-0.34, 0.27000001, 0.055],
           [-0.34, 0.27000001, 0.055],
           [-0.36000001, 0.28999999, 0.055],
           [-0.38, 0.30000001, 0.055],
           [-0.40000001, 0.31, 0.05],
           [-0.41999999, 0.31999999, 0.045],
           [-0.44, 0.33000001, 0.045],
           [-0.46000001, 0.34, 0.045],
           [-0.47, 0.34, 0.045],
           [-0.5, 0.34, 0.045],
           [-0.50999999, 0.34, 0.045],
           [-0.51999998, 0.34, 0.045],
           [-0.51999998, 0.33000001, 0.045],
           [-0.54000002, 0.31999999, 0.045],
           [-0.54000002, 0.30000001, 0.05],
           [-0.55000001, 0.28999999, 0.055],
           [-0.56, 0.25999999, 0.06],
           [-0.56, 0.23999999, 0.06],
           [-0.56999999, 0.22, 0.06]])

    ## Plot achieved trajectory
    start = 118
    end = 210
    achieved_traj[:, 0] = (achieved_traj[:, 0])
    achieved_traj[:, 1] = (achieved_traj[:, 1])
    achieved_traj[:, 2] = (achieved_traj[:, 2])
    ax.plot3D(achieved_traj[start:end, 0], achieved_traj[start:end, 1], achieved_traj[start:end, 2], 'red', linewidth=3, linestyle='-', label="Microrobot's trajectory")

    ax.set_xlabel("X")
    ax.set_ylabel("Y")
    ax.set_zlabel("Z")
    ax.set_xlim([0.7, -0.7])
    ax.set_ylim([0.7, -0.7])
    ax.set_zlim([0, 0.5])
    ax.legend()

    plt.show()

    print(None)


if __name__ == '__main__':
    main()
